[{"title":"URL","type":0,"sectionRef":"#","url":"api/URL","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"URL","url":"api/URL#types","content":" "},{"title":"URL​","type":1,"pageTitle":"URL","url":"api/URL#URL","content":"&lt;/&gt; interface URL { scheme: string-- The scheme of the URL, including the &quot;:&quot;; e.g. &quot;https:&quot; username: string-- The username specified before the domain name. password: string-- The password specified before the domain name. host: string-- The domain name (.hostname) followed by the port if specified (.port); e.g. &quot;csqrl.dev:1337&quot; hostname: string-- The domain name; e.g. &quot;csqrl.dev&quot; port: string-- The port number if specified; e.g. &quot;1337&quot; origin: string-- The origin of the URL; e.g. &quot;https://csqrl.dev:1337&quot; path: string-- The path of the URL, excluding the leading &quot;/&quot;, query string and hash fragment; e.g. &quot;path/to/file&quot; query: string-- The query string of the URL, excluding the leading &quot;?&quot; and hash fragment; e.g. &quot;param=value&quot; hash: string-- The hash fragment of the URL, excluding the leading &quot;#&quot;; e.g. &quot;hash&quot; href: string-- The full URL; e.g. &quot;https://csqrl.dev:1337/path/to/file?param=value#hash&quot; }  "},{"title":"Functions​","type":1,"pageTitle":"URL","url":"api/URL#functions","content":" "},{"title":"params​","type":1,"pageTitle":"URL","url":"api/URL#params","content":"&lt;/&gt; URL.params( query: string-- The query string to parse. ) → table-- The parsed query string. Parses a query string into a table. A leading ? will be removed from the query string. local query = &quot;?lorem=ipsum&amp;dolor=sit&amp;amet=consectetur&quot; local value = params(query) -- {lorem = &quot;ipsum&quot;, dolor = &quot;sit&quot;, amet = &quot;consectetur&quot;}   "},{"title":"normalisePath​","type":1,"pageTitle":"URL","url":"api/URL#normalisePath","content":"&lt;/&gt; URL.normalisePath( path: string-- The path to normalise. ) → string-- The normalised path. Normalises a URL path, removing dot segments and resolving relative paths. local path = &quot;/./lorem/ipsum/../dolor/../sit&quot; local value = normalisePath(path) -- &quot;/lorem/sit&quot;   "},{"title":"parse​","type":1,"pageTitle":"URL","url":"api/URL#parse","content":"&lt;/&gt; URL.parse( url: string-- The URL to parse. ) → URL-- The parsed URL. Parses a URL into a URL object. local value = URL.parse(&quot;https://example.com:8080/path?query=true#hash&quot;) value.hostname -- &quot;example.com&quot; value.port -- 8080 value.path -- &quot;path&quot; value.query -- &quot;query=true&quot; value.hash -- &quot;hash&quot; value.scheme -- &quot;https:&quot;   "},{"title":"stringify​","type":1,"pageTitle":"URL","url":"api/URL#stringify","content":"&lt;/&gt; URL.stringify( url: URL-- The URL object to stringify. ) → string-- The stringified URL. Transforms a previously parsed URL object back into a string. local parsed = URL.parse(&quot;https://example.com:8080/path?query#hash&quot;) local value = URL.stringify(parsed) -- &quot;https://example.com:8080/path?query#hash&quot;  "}]